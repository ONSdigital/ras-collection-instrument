apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: "{{ .Values.env }}"
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        env: "{{ .Values.env }}"
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "eu.gcr.io/ons-rasrmbs-management/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-server
              containerPort: 8085
          readinessProbe:
            httpGet:
              path: /info
              port: 8085
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /info
              port: 8085
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: DB_HOST
            value: $(POSTGRES_SERVICE_HOST)
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-name
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: password
          - name: SECURITY_USER_NAME
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-user
          - name: SECURITY_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-password
          - name: RABBITMQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-username
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-password
          - name: DATABASE_URI
            value: "postgresql://$(DB_USERNAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
          - name: JSON_SECRET_KEYS
            valueFrom:
              secretKeyRef:
                name: json-secrets
                key: json-secret-keys
          - name: PORT
            value: "8085"
          - name: CONFIG_YML
            value: "config/config-docker.yaml"
          - name: ONS_CRYPTOKEY
            value: "{{ .Values.cryptoKey }}"
          - name: COLLECTION_EXERCISE_HOST
            value: "$(COLLECTION_EXERCISE_SERVICE_HOST)"
          - name: COLLECTION_EXERCISE_PORT
            value: "$(COLLECTION_EXERCISE_SERVICE_PORT)"
          - name: CASE_SERVICE_HOST
            value: "$(CASE_SERVICE_HOST)"
          - name: PARTY_SERVICE_HOST
            value: "$(PARTY_SERVICE_HOST)"
          - name: PARTY_SERVICE_PORT
            value: "$(PARTY_SERVICE_PORT)"
          - name: RM_SURVEY_SERVICE_HOST
            value: "$(SURVEY_SERVICE_HOST)"
          - name: RABBITMQ_AMQP_SURVEY_RESPONSE
            value: "amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@$(RABBITMQ_SERVICE_HOST):5672"
          - name: RABBITMQ_AMQP_COLLECTION_INSTRUMENT
            value: "amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@$(RABBITMQ_SERVICE_HOST):5672"
          - name: ZIPKIN_DSN
            value: "http://$(ZIPKIN_SERVICE_HOST):$(ZIPKIN_SERVICE_PORT)/api/v1/spans"
          - name: ZIPKIN_SAMPLE_RATE
            value: "100"
          resources:
            {{ toYaml .Values.resources | nindent 12 }}
