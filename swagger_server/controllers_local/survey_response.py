##############################################################################
#                                                                            #
#   Collection Instruments Upload                                            #
#   License: MIT                                                             #
#   Copyright (c) 2017 Crown Copyright (Office for National Statistics)      #
#                                                                            #
##############################################################################
from ..models_local.survey_responses import SurveyResponseModel
from .session_manager import session_scope
from ..configuration import ons_env
from .helper import is_valid_file_format, is_valid_file_name_length
import logging


FILE_TYPE_ERROR = 'un-accepted file format'
FILE_NAME_LENGTH_ERROR = 'The name of the file is too long'
SURVEY_RESPONSE_NOT_FOUND = 'The survey response could not be found'
UPLOAD_SUCCESSFUL = 'Upload successful'
INCOMPLETE_UPLOAD = 'The upload must have case_id and a file attached'


class SurveyResponse(object):
    """
    The survey response from a respondent
    """
    def add_survey_response(self, case_id, file):
        """
        Upload a survey response and persist in an encrypted database column
        :param case_id: A case id
        :param file: A file object from which we can read the file contents
        :return: Returns status code and message
        """
        if not case_id or not file:
            return 400, INCOMPLETE_UPLOAD

        is_valid_file, msg = self._is_valid_file(file.filename)

        if is_valid_file:
            file_data = file.read()
            file_size = len(file_data)
            encrypted_file = ons_env.cipher.encrypt(file_data)

            with session_scope() as session:
                survey_response = SurveyResponseModel(file.filename, encrypted_file, case_id, file_size)
                session.add(survey_response)
            return 200, UPLOAD_SUCCESSFUL
        else:
            logging.debug("{} was generated by case_id {}".format(msg, case_id))
            return 400, msg

    @staticmethod
    def get_survey_response(case_id):
        """
        Find a survey response from a given case_id
        :param case_id: A case id
        :return: Returns survey response
        """
        with session_scope() as session:
            result = session.query(SurveyResponseModel).filter(SurveyResponseModel.case_id == case_id).first()
        if result:
            return 200, result.json
        return 404, SURVEY_RESPONSE_NOT_FOUND

    @staticmethod
    def _is_valid_file(file_name):
        """
        Check a file is valid
        :param file_name: The file_name to check
        :return: boolean
        """
        if not is_valid_file_format(file_name, ons_env.get('upload_file_extensions')):
            return False, FILE_TYPE_ERROR

        if not is_valid_file_name_length(file_name, ons_env.get('max_upload_file_name_length')):
            return False, FILE_NAME_LENGTH_ERROR

        return True, ""
