# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Classifiers(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, classifier_type: str=None, classifier: str=None):
        """
        Classifiers - a model defined in Swagger

        :param classifier_type: The classifier_type of this Classifiers.
        :type classifier_type: str
        :param classifier: The classifier of this Classifiers.
        :type classifier: str
        """
        self.swagger_types = {
            'classifier_type': str,
            'classifier': str
        }

        self.attribute_map = {
            'classifier_type': 'classifierType',
            'classifier': 'classifier'
        }

        self._classifier_type = classifier_type
        self._classifier = classifier

    @classmethod
    def from_dict(cls, dikt) -> 'Classifiers':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The classifiers of this Classifiers.
        :rtype: Classifiers
        """
        return deserialize_model(dikt, cls)

    @property
    def classifier_type(self) -> str:
        """
        Gets the classifier_type of this Classifiers.

        :return: The classifier_type of this Classifiers.
        :rtype: str
        """
        return self._classifier_type

    @classifier_type.setter
    def classifier_type(self, classifier_type: str):
        """
        Sets the classifier_type of this Classifiers.

        :param classifier_type: The classifier_type of this Classifiers.
        :type classifier_type: str
        """
        allowed_values = ["RU_REF", "INDUSTRY", "LEGAL_STATUS"]
        if classifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `classifier_type` ({0}), must be one of {1}"
                .format(classifier_type, allowed_values)
            )

        self._classifier_type = classifier_type

    @property
    def classifier(self) -> str:
        """
        Gets the classifier of this Classifiers.

        :return: The classifier of this Classifiers.
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier: str):
        """
        Sets the classifier of this Classifiers.

        :param classifier: The classifier of this Classifiers.
        :type classifier: str
        """
        if classifier is None:
            raise ValueError("Invalid value for `classifier`, must not be `None`")

        self._classifier = classifier

