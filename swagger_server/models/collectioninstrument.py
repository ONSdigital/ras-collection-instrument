# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.classifiers import Classifiers
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Collectioninstrument(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ci_type: str='OFFLINE', survey_id: str='urn:ons.gov.uk:id:survey:001.234.56789', classifiers: Classifiers=None, id: str='urn:ons.gov.uk:id:ci:001.234.56789'):
        """
        Collectioninstrument - a model defined in Swagger

        :param ci_type: The ci_type of this Collectioninstrument.
        :type ci_type: str
        :param survey_id: The survey_id of this Collectioninstrument.
        :type survey_id: str
        :param classifiers: The classifiers of this Collectioninstrument.
        :type classifiers: Classifiers
        :param id: The id of this Collectioninstrument.
        :type id: str
        """
        self.swagger_types = {
            'ci_type': str,
            'survey_id': str,
            'classifiers': Classifiers,
            'id': str
        }

        self.attribute_map = {
            'ci_type': 'ciType',
            'survey_id': 'surveyId',
            'classifiers': 'classifiers',
            'id': 'id'
        }

        self._ci_type = ci_type
        self._survey_id = survey_id
        self._classifiers = classifiers
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Collectioninstrument':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collectioninstrument of this Collectioninstrument.
        :rtype: Collectioninstrument
        """
        return deserialize_model(dikt, cls)

    @property
    def ci_type(self) -> str:
        """
        Gets the ci_type of this Collectioninstrument.

        :return: The ci_type of this Collectioninstrument.
        :rtype: str
        """
        return self._ci_type

    @ci_type.setter
    def ci_type(self, ci_type: str):
        """
        Sets the ci_type of this Collectioninstrument.

        :param ci_type: The ci_type of this Collectioninstrument.
        :type ci_type: str
        """
        allowed_values = ["ONLINE", "OFFLINE"]
        if ci_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ci_type` ({0}), must be one of {1}"
                .format(ci_type, allowed_values)
            )

        self._ci_type = ci_type

    @property
    def survey_id(self) -> str:
        """
        Gets the survey_id of this Collectioninstrument.

        :return: The survey_id of this Collectioninstrument.
        :rtype: str
        """
        return self._survey_id

    @survey_id.setter
    def survey_id(self, survey_id: str):
        """
        Sets the survey_id of this Collectioninstrument.

        :param survey_id: The survey_id of this Collectioninstrument.
        :type survey_id: str
        """
        if survey_id is None:
            raise ValueError("Invalid value for `survey_id`, must not be `None`")

        self._survey_id = survey_id

    @property
    def classifiers(self) -> Classifiers:
        """
        Gets the classifiers of this Collectioninstrument.

        :return: The classifiers of this Collectioninstrument.
        :rtype: Classifiers
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers: Classifiers):
        """
        Sets the classifiers of this Collectioninstrument.

        :param classifiers: The classifiers of this Collectioninstrument.
        :type classifiers: Classifiers
        """

        self._classifiers = classifiers

    @property
    def id(self) -> str:
        """
        Gets the id of this Collectioninstrument.

        :return: The id of this Collectioninstrument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Collectioninstrument.

        :param id: The id of this Collectioninstrument.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

